"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountTransferClient = AccountTransferClient;
exports.GetPlatformAccountTransfersError = void 0;
var _AccountTransferError = require("./AccountTransferError.cjs");
var _client = require("../../../client.cjs");
function AccountTransferClient(init) {
  const baseUrl = init.baseUrl ?? "https://api.portone.io";
  const secret = init.secret;
  return {
    getPlatformAccountTransfers: async options => {
      const isForTest = options?.isForTest;
      const page = options?.page;
      const filter = options?.filter;
      const requestBody = JSON.stringify({
        isForTest,
        page,
        filter
      });
      const query = [["requestBody", requestBody]].flatMap(([key, value]) => value == null ? [] : `${key}=${encodeURIComponent(value)}`).join("&");
      const response = await fetch(new URL(`/platform/account-transfers?${query}`, baseUrl), {
        method: "GET",
        headers: {
          Authorization: `PortOne ${secret}`,
          "User-Agent": _client.USER_AGENT
        }
      });
      if (!response.ok) {
        throw new GetPlatformAccountTransfersError(await response.json());
      }
      return response.json();
    }
  };
}
class GetPlatformAccountTransfersError extends _AccountTransferError.AccountTransferError {
  /** @ignore */
  constructor(data) {
    super(data);
    Object.setPrototypeOf(this, GetPlatformAccountTransfersError.prototype);
    this.name = "GetPlatformAccountTransfersError";
  }
}
exports.GetPlatformAccountTransfersError = GetPlatformAccountTransfersError;