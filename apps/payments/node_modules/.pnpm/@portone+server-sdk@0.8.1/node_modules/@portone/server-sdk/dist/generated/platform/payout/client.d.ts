import { PayoutError } from "./PayoutError.js";
import type { Unrecognized } from "./../../../utils/unrecognized.js";
import { type PortOneClientInit } from "../../../client.js";
import type { ForbiddenError } from "../../../generated/common/ForbiddenError.js";
import type { GetPlatformPayoutsResponse } from "../../../generated/platform/payout/GetPlatformPayoutsResponse.js";
import type { InvalidRequestError } from "../../../generated/common/InvalidRequestError.js";
import type { PageInput } from "../../../generated/common/PageInput.js";
import type { PlatformNotEnabledError } from "../../../generated/platform/PlatformNotEnabledError.js";
import type { PlatformPayoutFilterInput } from "../../../generated/platform/payout/PlatformPayoutFilterInput.js";
import type { UnauthorizedError } from "../../../generated/common/UnauthorizedError.js";
export declare function PayoutClient(init: PortOneClientInit): PayoutClient;
export type PayoutClient = {
    /**
     * 지급 내역 다건 조회
     *
     * 여러 지급 내역을 조회합니다.
     *
     * @throws {@link GetPlatformPayoutsError}
     */
    getPlatformPayouts: (options?: {
        isForTest?: boolean;
        page?: PageInput;
        filter?: PlatformPayoutFilterInput;
    }) => Promise<GetPlatformPayoutsResponse>;
};
export declare class GetPlatformPayoutsError extends PayoutError {
    readonly data: ForbiddenError | InvalidRequestError | PlatformNotEnabledError | UnauthorizedError | {
        readonly type: Unrecognized;
    };
    /** @ignore */
    constructor(data: ForbiddenError | InvalidRequestError | PlatformNotEnabledError | UnauthorizedError | {
        readonly type: Unrecognized;
    });
}
