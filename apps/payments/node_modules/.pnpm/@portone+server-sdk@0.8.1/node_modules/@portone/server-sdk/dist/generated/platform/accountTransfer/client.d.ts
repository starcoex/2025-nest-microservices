import { AccountTransferError } from "./AccountTransferError.js";
import type { Unrecognized } from "./../../../utils/unrecognized.js";
import { type PortOneClientInit } from "../../../client.js";
import type { ForbiddenError } from "../../../generated/common/ForbiddenError.js";
import type { GetPlatformAccountTransfersResponse } from "../../../generated/platform/accountTransfer/GetPlatformAccountTransfersResponse.js";
import type { InvalidRequestError } from "../../../generated/common/InvalidRequestError.js";
import type { PageInput } from "../../../generated/common/PageInput.js";
import type { PlatformAccountTransferFilter } from "../../../generated/platform/accountTransfer/PlatformAccountTransferFilter.js";
import type { PlatformNotEnabledError } from "../../../generated/platform/PlatformNotEnabledError.js";
import type { UnauthorizedError } from "../../../generated/common/UnauthorizedError.js";
export declare function AccountTransferClient(init: PortOneClientInit): AccountTransferClient;
export type AccountTransferClient = {
    /**
     * 이체 내역 다건 조회
     *
     * 여러 이체 내역을 조회합니다.
     *
     * @throws {@link GetPlatformAccountTransfersError}
     */
    getPlatformAccountTransfers: (options?: {
        isForTest?: boolean;
        page?: PageInput;
        filter?: PlatformAccountTransferFilter;
    }) => Promise<GetPlatformAccountTransfersResponse>;
};
export declare class GetPlatformAccountTransfersError extends AccountTransferError {
    readonly data: ForbiddenError | InvalidRequestError | PlatformNotEnabledError | UnauthorizedError | {
        readonly type: Unrecognized;
    };
    /** @ignore */
    constructor(data: ForbiddenError | InvalidRequestError | PlatformNotEnabledError | UnauthorizedError | {
        readonly type: Unrecognized;
    });
}
