"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetPlatformPartnerSettlementsError = void 0;
exports.PartnerSettlementClient = PartnerSettlementClient;
var _PartnerSettlementError = require("./PartnerSettlementError.cjs");
var _client = require("../../../client.cjs");
function PartnerSettlementClient(init) {
  const baseUrl = init.baseUrl ?? "https://api.portone.io";
  const secret = init.secret;
  return {
    getPlatformPartnerSettlements: async options => {
      const {
        page,
        filter,
        isForTest
      } = options;
      const requestBody = JSON.stringify({
        page,
        filter,
        isForTest
      });
      const query = [["requestBody", requestBody]].flatMap(([key, value]) => value == null ? [] : `${key}=${encodeURIComponent(value)}`).join("&");
      const response = await fetch(new URL(`/platform/partner-settlements?${query}`, baseUrl), {
        method: "GET",
        headers: {
          Authorization: `PortOne ${secret}`,
          "User-Agent": _client.USER_AGENT
        }
      });
      if (!response.ok) {
        throw new GetPlatformPartnerSettlementsError(await response.json());
      }
      return response.json();
    }
  };
}
class GetPlatformPartnerSettlementsError extends _PartnerSettlementError.PartnerSettlementError {
  /** @ignore */
  constructor(data) {
    super(data);
    Object.setPrototypeOf(this, GetPlatformPartnerSettlementsError.prototype);
    this.name = "GetPlatformPartnerSettlementsError";
  }
}
exports.GetPlatformPartnerSettlementsError = GetPlatformPartnerSettlementsError;